Creating the adjacency matrix :
Done.
Randomly inserting infinity edges...
Waiting : 5 4 3 2 1 Done
Matrix :
35	89	40	5	
1	27	69	50	
9999	9999	81	20	
63	52	18	58	

 OUTPUT
 
Starting with source...
Source : 0
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 9999
d[1] + a[1][2] = 89
Newer path is shorter...
v = 3
d[3] = 9999
d[1] + a[1][3] = 40
Newer path is shorter...
Finding nearest accessible node...
Nearest node : 3
With 3 as the intermediate node :
v = 0
d[0] = 0
d[3] + a[3][0] = 40
v = 1
d[1] = 0
d[3] + a[3][1] = 10039
v = 2
d[2] = 89
d[3] + a[3][2] = 10039
v = 3
d[3] = 40
d[3] + a[3][3] = 121
Finding nearest accessible node...
Nearest node : 2
With 2 as the intermediate node :
v = 0
d[0] = 0
d[2] + a[2][0] = 89
v = 1
d[1] = 0
d[2] + a[2][1] = 90
v = 2
d[2] = 89
d[2] + a[2][2] = 116
v = 3
d[3] = 40
d[2] + a[2][3] = 158
0<--0=0

Starting with source...
Source : 0
Finding nearest accessible node...
Nearest node : 1
1 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
1<--0=0

Starting with source...
Source : 0
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 9999
d[1] + a[1][2] = 89
Newer path is shorter...
v = 3
d[3] = 9999
d[1] + a[1][3] = 40
Newer path is shorter...
Finding nearest accessible node...
Nearest node : 3
With 3 as the intermediate node :
v = 0
d[0] = 0
d[3] + a[3][0] = 40
v = 1
d[1] = 0
d[3] + a[3][1] = 10039
v = 2
d[2] = 89
d[3] + a[3][2] = 10039
v = 3
d[3] = 40
d[3] + a[3][3] = 121
Finding nearest accessible node...
Nearest node : 2
2 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
2<--1<--0=89

Starting with source...
Source : 0
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 9999
d[1] + a[1][2] = 89
Newer path is shorter...
v = 3
d[3] = 9999
d[1] + a[1][3] = 40
Newer path is shorter...
Finding nearest accessible node...
Nearest node : 3
3 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
3<--1<--0=40

***************************

 OUTPUT
 
Starting with source...
Source : 1
Finding nearest accessible node...
Nearest node : 0
0 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
0<--1=0

Starting with source...
Source : 1
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 35
d[0] + a[0][1] = 0
v = 2
d[2] = 89
d[0] + a[0][2] = 9999
v = 3
d[3] = 40
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 3
With 3 as the intermediate node :
v = 0
d[0] = 0
d[3] + a[3][0] = 40
v = 1
d[1] = 35
d[3] + a[3][1] = 10039
v = 2
d[2] = 89
d[3] + a[3][2] = 10039
v = 3
d[3] = 40
d[3] + a[3][3] = 121
Finding nearest accessible node...
Nearest node : 2
With 2 as the intermediate node :
v = 0
d[0] = 0
d[2] + a[2][0] = 89
v = 1
d[1] = 35
d[2] + a[2][1] = 90
v = 2
d[2] = 89
d[2] + a[2][2] = 116
v = 3
d[3] = 40
d[2] + a[2][3] = 158
1<--1=35

Starting with source...
Source : 1
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 35
d[0] + a[0][1] = 0
v = 2
d[2] = 89
d[0] + a[0][2] = 9999
v = 3
d[3] = 40
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 3
With 3 as the intermediate node :
v = 0
d[0] = 0
d[3] + a[3][0] = 40
v = 1
d[1] = 35
d[3] + a[3][1] = 10039
v = 2
d[2] = 89
d[3] + a[3][2] = 10039
v = 3
d[3] = 40
d[3] + a[3][3] = 121
Finding nearest accessible node...
Nearest node : 2
2 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
2<--1=89

Starting with source...
Source : 1
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 35
d[0] + a[0][1] = 0
v = 2
d[2] = 89
d[0] + a[0][2] = 9999
v = 3
d[3] = 40
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 3
3 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
3<--1=40

***************************

 OUTPUT
 
Starting with source...
Source : 2
Finding nearest accessible node...
Nearest node : 0
0 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
0<--2=0

Starting with source...
Source : 2
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 1
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 27
d[0] + a[0][2] = 9999
v = 3
d[3] = 69
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
1 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
1<--0<--2=0

Starting with source...
Source : 2
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 1
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 27
d[0] + a[0][2] = 9999
v = 3
d[3] = 69
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 27
d[1] + a[1][2] = 89
v = 3
d[3] = 69
d[1] + a[1][3] = 40
Newer path is shorter...
Finding nearest accessible node...
Nearest node : 3
With 3 as the intermediate node :
v = 0
d[0] = 0
d[3] + a[3][0] = 40
v = 1
d[1] = 0
d[3] + a[3][1] = 10039
v = 2
d[2] = 27
d[3] + a[3][2] = 10039
v = 3
d[3] = 40
d[3] + a[3][3] = 121
2<--2=27

Starting with source...
Source : 2
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 1
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 27
d[0] + a[0][2] = 9999
v = 3
d[3] = 69
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 27
d[1] + a[1][2] = 89
v = 3
d[3] = 69
d[1] + a[1][3] = 40
Newer path is shorter...
Finding nearest accessible node...
Nearest node : 3
3 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
3<--1<--0<--2=40

***************************

 OUTPUT
 
Starting with source...
Source : 3
Finding nearest accessible node...
Nearest node : 0
0 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
0<--3=0

Starting with source...
Source : 3
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 9999
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 9999
d[0] + a[0][2] = 9999
v = 3
d[3] = 81
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
1 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
1<--0<--3=0

Starting with source...
Source : 3
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 9999
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 9999
d[0] + a[0][2] = 9999
v = 3
d[3] = 81
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 9999
d[1] + a[1][2] = 89
Newer path is shorter...
v = 3
d[3] = 81
d[1] + a[1][3] = 40
Finding nearest accessible node...
Nearest node : 2
2 is the destination.
Destination has been reached whose path has already been calculated.
Returning...
2<--1<--0<--3=89

Starting with source...
Source : 3
Finding nearest accessible node...
Nearest node : 0
With 0 as the intermediate node :
v = 0
d[0] = 0
d[0] + a[0][0] = 0
v = 1
d[1] = 9999
d[0] + a[0][1] = 0
Newer path is shorter...
v = 2
d[2] = 9999
d[0] + a[0][2] = 9999
v = 3
d[3] = 81
d[0] + a[0][3] = 9999
Finding nearest accessible node...
Nearest node : 1
With 1 as the intermediate node :
v = 0
d[0] = 0
d[1] + a[1][0] = 0
v = 1
d[1] = 0
d[1] + a[1][1] = 35
v = 2
d[2] = 9999
d[1] + a[1][2] = 89
Newer path is shorter...
v = 3
d[3] = 81
d[1] + a[1][3] = 40
Finding nearest accessible node...
Nearest node : 2
With 2 as the intermediate node :
v = 0
d[0] = 0
d[2] + a[2][0] = 89
v = 1
d[1] = 0
d[2] + a[2][1] = 90
v = 2
d[2] = 89
d[2] + a[2][2] = 116
v = 3
d[3] = 81
d[2] + a[2][3] = 158
3<--3=81

***************************
